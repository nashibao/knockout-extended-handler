// Generated by CoffeeScript 1.4.0
var _this = this;

ko.bindingHandlers.href = {
  init: function(element, valueAccessor) {
    var _this = this;
    $(element).css({
      "cursor": "pointer"
    });
    return $(element).click(function() {
      return document.location = valueAccessor();
    });
  }
};

ko.bindingHandlers.truncate = function() {
  return {
    init: function(element, valueAccessor, allBindingsAccessor, context) {
      var length, options, text, _ref;
      options = ko.toJS(valueAccessor()) || {};
      length = options.length;
      text = options.text;
      if (text.length > length) {
        text = text[{
          0: length
        }];
      }
      return (_ref = typeof element.innerText === "string") != null ? _ref : element.innerText = {
        text: element.textContent = text
      };
    }
  };
};

ko.bindingHandlers.highlight = {
  update: function(element, valueAccessor, allBindingsAccessor, context) {
    var re, text, word, words, _i, _len;
    words = ko.toJS(valueAccessor()) || {};
    words = words.split(',');
    text = element.textContent;
    for (_i = 0, _len = words.length; _i < _len; _i++) {
      word = words[_i];
      if (word) {
        re = new RegExp(word, "g");
        text = text.replace(re, '<strong>' + word + '</strong>');
      }
    }
    return $(element).html(text);
  }
};

(function() {
  var ext, jquery_extenders, _i, _len;
  jquery_extenders = ['datepicker'];
  for (_i = 0, _len = jquery_extenders.length; _i < _len; _i++) {
    ext = jquery_extenders[_i];
    ko.bindingHandlers[ext] = (function(ext) {
      return {
        init: function(element, valueAccessor) {
          var options;
          options = ko.toJS(valueAccessor()) || {};
          try {
            return $(element)[ext](options);
          } catch (e) {
            return utils.log(e);
          }
        }
      };
    })(ext);
  }
  return null;
})();

(function() {
  var ext, _i, _len, _ref;
  _ref = ['tooltip', 'popover'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    ext = _ref[_i];
    ko.bindingHandlers[ext] = (function(ext) {
      return {
        init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
          var options, _ref1;
          try {
            options = valueAccessor();
            if (options != null) {
              if ((_ref1 = options.trigger) == null) {
                options.trigger = 'manual';
              }
            }
            if ((options != null ? options.trigger : void 0) === 'manual') {
              $(element)[ext](options);
              return $(element).click(function() {
                return $(this)[ext]('hide');
              }).mouseenter(function() {
                return $(this)[ext]('show');
              }).mouseleave(function() {
                return $(this)[ext]('hide');
              });
            }
          } catch (e) {
            return utils.log(e);
          }
        }
      };
    })(ext);
  }
  return null;
})();

ko.bindingHandlers.stopBinding = {
  init: function() {
    return {
      controlsDescendantBindings: true
    };
  }
};

ko.virtualElements.allowedBindings.stopBinding = true;
